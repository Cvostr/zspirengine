#version 430
#extension GL_ARB_compute_shader : enable
#extension GL_ARB_shader_image_load_store : enable

layout (rgba8, binding=0) readonly uniform image2D sourceTex;           //Textures bound to 0 and 1 resp. that are used to
layout (binding=1) writeonly  uniform image2D targetTex;           //acquire texture and save changes made to texture

layout (local_size_x=1 , local_size_y=1) in;     //Local work-group size

void main(){

  ivec2 pxlPos = ivec2(gl_GlobalInvocationID.xy);     //Get pxl-pos

  ivec2 offsets[9] = ivec2[](
        vec2(-1,  1), // top-left
        vec2( 0.0f,    1), // top-center
        vec2( 1,  1), // top-right
        vec2(-1,  0.0f),   // center-left
        vec2( 0.0f,    0.0f),   // center-center
        vec2( 1,  0.0f),   // center-right
        vec2(-1, -1), // bottom-left
        vec2( 0.0f,   -1), // bottom-center
        vec2( 1, -1)  // bottom-right    
    );

  float kernel[9] = float[](
    1.0 / 16, 2.0 / 16, 1.0 / 16,
    2.0 / 16, 4.0 / 16, 2.0 / 16,
    1.0 / 16, 2.0 / 16, 1.0 / 16  
  );

  vec4 samples[9];

  for(int i = 0; i < 9; i++)
    {
      samples[i] = imageLoad(sourceTex, pxlPos + offsets[i]);
    }

    vec4 col = vec4(0.0);
    for(int i = 0; i < 9; i++)
        col += samples[i] * kernel[i];

  imageStore(targetTex, pxlPos, col);    //Write white to texture
}